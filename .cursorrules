# MCP Server Quickâ€‘Start Guide (for AI usage)

The following snippet can be pasted straight into an AI prompt to teach it **how to spin up a Model Context Protocol (MCP) server in Python with FastMCP**. Feel free to copy / adapt.

---

## 1. MCP & FastMCP Overview

| Item | Description |
|------|-------------|
| **MCP** (Model Context Protocol) | A JSONâ€‘based protocol that connects LLM clients to external *tools*, *resources* and *prompts*. |
| **FastMCP** | Python SDK providing autoâ€‘generated JSONâ€‘Schemas and async runtime. Decorate any function with `@mcp.tool()` and it becomes callable by an AI. |

---

## 2. Prerequisites & Setup

```bash
# 1) Python 3.10+ installed

# 2) Install uv (fast dependency manager)
curl -LsSf https://astral.sh/uv/install.sh | sh

# 3) Project bootstrap
uv init mcp-server-demo
cd mcp-server-demo
uv venv && source .venv/bin/activate

# 4) Add dependencies
uv add "mcp[cli]" httpx
```

---

## 3. Minimal directory structure

```
mcp-server-demo/
â”œâ”€ pyproject.toml   # generated by uv
â”œâ”€ main.py          # server implementation
â””â”€ ...              # (optional modules/ utils/ etc.)
```

---

## 4. Skeleton code (`main.py`)

```python
from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("demo")  # server name

API_URL = "https://api.example.com/items"

async def fetch_json(url: str) -> dict[str, Any] | None:
    """Tiny helper using httpx."""
    async with httpx.AsyncClient(timeout=30) as client:
        try:
            r = await client.get(url, headers={"User-Agent": "demo/1.0"})
            r.raise_for_status()
            return r.json()
        except Exception:
            return None

@mcp.tool()
async def get_data(item_id: str) -> dict[str, Any] | str:
    """Return JSON for a given ID."""
    data = await fetch_json(f"{API_URL}/{item_id}")
    return data or "Not found"

if __name__ == "__main__":
    # Alternatives: transport="http", "sse", "tcp", "websocket"
    mcp.run(transport="stdio")
```

Key points:
â€¢ Function name â†’ tool name (`get-data`) visible to clients.
â€¢ Type hints + docstring are reflected in the generated schema.
â€¢ Use async I/O so multiple tool calls don't block each other.

---

## 5. Adding resources & prompts

```python
@mcp.resource()
class LogResource:
    """Return the latest app log."""
    async def read(self) -> str:
        return open("/var/log/app.log").read()

@mcp.prompt()
def bug_report_template() -> str:
    return """## Bug report\n- Summary:\n- Steps to reproduce:\n- Expected result:\n- Actual result:\n"""
```

---

## 6. Transports

| Transport | Use case | Note |
|-----------|----------|------|
| `stdio` (default) | Local CLI, Claude Desktop, Cursor, etc. | Simplest |
| `http` / `sse` | Web browser / REST clients with streaming | mind CORS |
| `tcp` / `websocket` | Multiâ€‘client experiments | experimental |

---

## 7. Run & Test locally

```bash
# Start server
uv run main.py

# Manual call via CLI
echo '{"id":1,"type":"call","tool":"get-data","args":{"item_id":"123"}}' | \
  uv run mcp inspect -
```

### Example â€“ Cursor (VS Code) integration
Add to `.cursorrules` or paste into a prompt and Cursor will connect to the server automatically.

---

## 8. Debugging & Logs

| Source | Location |
|--------|----------|
| Server exceptions | shown in `uv run main.py` output |
| Claude Desktop logs | `~/Library/Logs/Claude/<server-name>.log` |
| Protocol trace | `export MCP_LOG_LEVEL=DEBUG` before launch |

---

## 9. Packaging & Reâ€‘use tips

1. **Publish to PyPI**  
   Fill `project.name` & `version` in `pyproject.toml`, then `uv publish`.
2. **Docker**  
   ```dockerfile
   FROM python:3.12-slim
   WORKDIR /app
   COPY . .
   RUN pip install "mcp[cli]" httpx
   CMD ["python", "main.py"]
   ```
3. **CI tests** â€“ use `pytest-asyncio` for async tool calls.

---

## 10. Security & Ops best practices

â€¢ FastMCP validates input, but *always* sanitise external API outputs.  
â€¢ Offâ€‘load blocking work with `run_in_executor`.  
â€¢ Use environment variables for secrets.  
â€¢ Commit `uv.lock` to pin dependency versions.

---

> End of quickâ€‘start. Happy building! ðŸš€
```